/* While this template provides a good starting point for using Wear Compose, you can always
 * take a look at https://github.com/android/wear-os-samples/tree/main/ComposeStarter to find the
 * most up to date changes to the libraries and their usages.
 */

package com.example.mem_note.presentation

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Bundle
import android.speech.RecognizerIntent
import androidx.activity.ComponentActivity
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.activity.viewModels
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.content.ContextCompat
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.wear.compose.material.*
import com.example.mem_note.presentation.theme.MemnoteTheme

class MainActivity : ComponentActivity() {
    
    private val viewModel: MainViewModel by viewModels()
    
    private val requestPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted ->
        if (isGranted) {
            // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
        }
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ
        when {
            ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.RECORD_AUDIO
            ) == PackageManager.PERMISSION_GRANTED -> {
                // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å
            }
            else -> {
                requestPermissionLauncher.launch(Manifest.permission.RECORD_AUDIO)
            }
        }
        
        setContent {
            MemnoteTheme {
                SpeechRecognitionScreen(viewModel)
            }
        }
    }
}

@Composable
fun SpeechRecognitionScreen(viewModel: MainViewModel) {
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()
    
    // Launcher –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    val voiceLauncher = rememberLauncherForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { activityResult ->
        if (activityResult.resultCode == android.app.Activity.RESULT_OK) {
            val recognizedText = viewModel.processSpeechResult(activityResult.data)
            if (recognizedText != null) {
                viewModel.sendRecognizedText(recognizedText)
            }
        } else {
            viewModel.setError("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        }
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    LaunchedEffect(Unit) {
        viewModel.setListening(true)
        voiceLauncher.launch(viewModel.createSpeechIntent())
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    LaunchedEffect(uiState.shouldStartNewRecognition) {
        if (uiState.shouldStartNewRecognition) {
            viewModel.resetRecognitionFlag()
            viewModel.setListening(true)
            voiceLauncher.launch(viewModel.createSpeechIntent())
        }
    }
    
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(MaterialTheme.colors.background),
        contentAlignment = Alignment.Center
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // –°—Ç–∞—Ç—É—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            Text(
                text = when {
                    uiState.isListening -> "–°–ª—É—à–∞—é..."
                    uiState.isSending -> "–û—Ç–ø—Ä–∞–≤–ª—è—é..."
                    uiState.errorMessage.isNotEmpty() -> "–û—à–∏–±–∫–∞: ${uiState.errorMessage}"
                    uiState.lastSentText.isNotEmpty() -> "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${uiState.lastSentText}"
                    else -> "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏"
                },
                style = MaterialTheme.typography.body1,
                textAlign = TextAlign.Center,
                color = MaterialTheme.colors.primary,
                modifier = Modifier.padding(16.dp)
            )
            
            // –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            if (uiState.recognizedText.isNotEmpty()) {
                Text(
                    text = uiState.recognizedText,
                    style = MaterialTheme.typography.body2,
                    textAlign = TextAlign.Center,
                    color = MaterialTheme.colors.onBackground,
                    modifier = Modifier.padding(horizontal = 16.dp)
                )
            }
            
            // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏
            Button(
                onClick = { 
                    viewModel.setListening(true)
                    voiceLauncher.launch(viewModel.createSpeechIntent())
                },
                enabled = !uiState.isListening && !uiState.isSending,
                modifier = Modifier
                    .size(80.dp)
                    .clip(CircleShape)
            ) {
                Text(
                    text = if (uiState.isListening) "‚èπ" else "üé§",
                    fontSize = 24.sp
                )
            }
        }
    }
}